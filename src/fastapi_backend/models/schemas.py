from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime

class LogItem(BaseModel):
    id: str
    rule_id: str
    rule_groups: List[str]
    rule_nist_800_53: Optional[List[str]] = None
    rule_gdpr: Optional[List[str]] = None
    rule_level: int
    rule_firedtimes: int
    agent_ip: str
    data_srcip: Optional[str] = None
    timestamp: str
    unix_timestamp: datetime
    rule_description: str

class Prediction(BaseModel):
    id: str
    prediction_label: str
    prediction_score: float
    is_attack: bool

class ClassifyResponse(BaseModel):
    predictions: List[Prediction]

class LogsRequest(BaseModel):
    logs: List[LogItem]

# =========================================================
# SCHEMAS FOR GRAPH BUILDER & GNN SERVICE
# =========================================================

class BuildGraphsResponse(BaseModel):
    """
    Response from the /build-graphs endpoint.
    Provides the paths to the generated .npz graph files.
    """
    message: str
    graph_files: List[str] # List of paths to the saved .npz files

class GraphPredictionRequest(BaseModel):
    """
    Request to the /predict-graphs endpoint.
    Takes the list of graph files generated by /build-graphs.
    """
    graph_files: List[str]

class GraphLinkPrediction(BaseModel):
    """
    A single predicted link (edge) between two logs in a graph.
    """
    source_log_id: str
    target_log_id: str
    prediction_score: float
    is_attack_link: bool

class GraphPredictionResult(BaseModel):
    """
    The set of predicted links for a single graph file.
    """
    graph_file: str
    predictions: List[GraphLinkPrediction]

class GraphPredictionResponse(BaseModel):
    """
    The final response from the /predict-graphs endpoint.
    Contains a list of results, one for each graph processed.
    """
    results: List[GraphPredictionResult]